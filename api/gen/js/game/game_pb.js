// source: game/game.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.game.BallState', null, global);
goog.exportSymbol('proto.game.ClientToServer', null, global);
goog.exportSymbol('proto.game.ClientToServer.InitialConnect', null, global);
goog.exportSymbol('proto.game.ClientToServer.MessageTypeCase', null, global);
goog.exportSymbol('proto.game.ClientToServer.PaddleInput', null, global);
goog.exportSymbol('proto.game.ClientToServer.PaddleInput.Direction', null, global);
goog.exportSymbol('proto.game.GameEvent', null, global);
goog.exportSymbol('proto.game.GameEvent.EventTypeCase', null, global);
goog.exportSymbol('proto.game.GameEvent.GameOver', null, global);
goog.exportSymbol('proto.game.GameEvent.ScoreUpdate', null, global);
goog.exportSymbol('proto.game.GameState', null, global);
goog.exportSymbol('proto.game.PaddleState', null, global);
goog.exportSymbol('proto.game.ScoreState', null, global);
goog.exportSymbol('proto.game.ServerToClient', null, global);
goog.exportSymbol('proto.game.ServerToClient.MessageTypeCase', null, global);
goog.exportSymbol('proto.game.Vector2', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.Vector2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.Vector2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.Vector2.displayName = 'proto.game.Vector2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.PaddleState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.PaddleState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.PaddleState.displayName = 'proto.game.PaddleState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.BallState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.BallState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.BallState.displayName = 'proto.game.BallState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ScoreState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.ScoreState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.ScoreState.displayName = 'proto.game.ScoreState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.GameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.GameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.GameState.displayName = 'proto.game.GameState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.GameEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.game.GameEvent.oneofGroups_);
};
goog.inherits(proto.game.GameEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.GameEvent.displayName = 'proto.game.GameEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.GameEvent.ScoreUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.GameEvent.ScoreUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.GameEvent.ScoreUpdate.displayName = 'proto.game.GameEvent.ScoreUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.GameEvent.GameOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.GameEvent.GameOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.GameEvent.GameOver.displayName = 'proto.game.GameEvent.GameOver';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ClientToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.game.ClientToServer.oneofGroups_);
};
goog.inherits(proto.game.ClientToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.ClientToServer.displayName = 'proto.game.ClientToServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ClientToServer.InitialConnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.ClientToServer.InitialConnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.ClientToServer.InitialConnect.displayName = 'proto.game.ClientToServer.InitialConnect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ClientToServer.PaddleInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.ClientToServer.PaddleInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.ClientToServer.PaddleInput.displayName = 'proto.game.ClientToServer.PaddleInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.ServerToClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.game.ServerToClient.oneofGroups_);
};
goog.inherits(proto.game.ServerToClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.game.ServerToClient.displayName = 'proto.game.ServerToClient';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.Vector2.prototype.toObject = function(opt_includeInstance) {
  return proto.game.Vector2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.Vector2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.Vector2.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.Vector2}
 */
proto.game.Vector2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.Vector2;
  return proto.game.Vector2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.Vector2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.Vector2}
 */
proto.game.Vector2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.Vector2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.Vector2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.Vector2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.Vector2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.game.Vector2.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.game.Vector2} returns this
 */
proto.game.Vector2.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.game.Vector2.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.game.Vector2} returns this
 */
proto.game.Vector2.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.PaddleState.prototype.toObject = function(opt_includeInstance) {
  return proto.game.PaddleState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.PaddleState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.PaddleState.toObject = function(includeInstance, msg) {
  var f, obj = {
playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
position: (f = msg.getPosition()) && proto.game.Vector2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.PaddleState}
 */
proto.game.PaddleState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.PaddleState;
  return proto.game.PaddleState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.PaddleState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.PaddleState}
 */
proto.game.PaddleState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.game.Vector2;
      reader.readMessage(value,proto.game.Vector2.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.PaddleState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.PaddleState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.PaddleState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.PaddleState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.game.Vector2.serializeBinaryToWriter
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.game.PaddleState.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.PaddleState} returns this
 */
proto.game.PaddleState.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Vector2 position = 2;
 * @return {?proto.game.Vector2}
 */
proto.game.PaddleState.prototype.getPosition = function() {
  return /** @type{?proto.game.Vector2} */ (
    jspb.Message.getWrapperField(this, proto.game.Vector2, 2));
};


/**
 * @param {?proto.game.Vector2|undefined} value
 * @return {!proto.game.PaddleState} returns this
*/
proto.game.PaddleState.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.PaddleState} returns this
 */
proto.game.PaddleState.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.PaddleState.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.BallState.prototype.toObject = function(opt_includeInstance) {
  return proto.game.BallState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.BallState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.BallState.toObject = function(includeInstance, msg) {
  var f, obj = {
position: (f = msg.getPosition()) && proto.game.Vector2.toObject(includeInstance, f),
velocity: (f = msg.getVelocity()) && proto.game.Vector2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.BallState}
 */
proto.game.BallState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.BallState;
  return proto.game.BallState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.BallState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.BallState}
 */
proto.game.BallState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.game.Vector2;
      reader.readMessage(value,proto.game.Vector2.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.game.Vector2;
      reader.readMessage(value,proto.game.Vector2.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.BallState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.BallState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.BallState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.BallState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.game.Vector2.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.game.Vector2.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vector2 position = 1;
 * @return {?proto.game.Vector2}
 */
proto.game.BallState.prototype.getPosition = function() {
  return /** @type{?proto.game.Vector2} */ (
    jspb.Message.getWrapperField(this, proto.game.Vector2, 1));
};


/**
 * @param {?proto.game.Vector2|undefined} value
 * @return {!proto.game.BallState} returns this
*/
proto.game.BallState.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.BallState} returns this
 */
proto.game.BallState.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.BallState.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vector2 velocity = 2;
 * @return {?proto.game.Vector2}
 */
proto.game.BallState.prototype.getVelocity = function() {
  return /** @type{?proto.game.Vector2} */ (
    jspb.Message.getWrapperField(this, proto.game.Vector2, 2));
};


/**
 * @param {?proto.game.Vector2|undefined} value
 * @return {!proto.game.BallState} returns this
*/
proto.game.BallState.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.BallState} returns this
 */
proto.game.BallState.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.BallState.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ScoreState.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ScoreState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ScoreState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ScoreState.toObject = function(includeInstance, msg) {
  var f, obj = {
player1Score: jspb.Message.getFieldWithDefault(msg, 1, 0),
player2Score: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ScoreState}
 */
proto.game.ScoreState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ScoreState;
  return proto.game.ScoreState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ScoreState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ScoreState}
 */
proto.game.ScoreState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayer1Score(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayer2Score(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ScoreState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.ScoreState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.ScoreState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ScoreState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer1Score();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPlayer2Score();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 player1_score = 1;
 * @return {number}
 */
proto.game.ScoreState.prototype.getPlayer1Score = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.game.ScoreState} returns this
 */
proto.game.ScoreState.prototype.setPlayer1Score = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 player2_score = 2;
 * @return {number}
 */
proto.game.ScoreState.prototype.getPlayer2Score = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.game.ScoreState} returns this
 */
proto.game.ScoreState.prototype.setPlayer2Score = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.GameState.prototype.toObject = function(opt_includeInstance) {
  return proto.game.GameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.GameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameState.toObject = function(includeInstance, msg) {
  var f, obj = {
matchId: jspb.Message.getFieldWithDefault(msg, 1, ""),
ball: (f = msg.getBall()) && proto.game.BallState.toObject(includeInstance, f),
player1Paddle: (f = msg.getPlayer1Paddle()) && proto.game.PaddleState.toObject(includeInstance, f),
player2Paddle: (f = msg.getPlayer2Paddle()) && proto.game.PaddleState.toObject(includeInstance, f),
score: (f = msg.getScore()) && proto.game.ScoreState.toObject(includeInstance, f),
player1Id: jspb.Message.getFieldWithDefault(msg, 6, ""),
player2Id: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.GameState}
 */
proto.game.GameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.GameState;
  return proto.game.GameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.GameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.GameState}
 */
proto.game.GameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchId(value);
      break;
    case 2:
      var value = new proto.game.BallState;
      reader.readMessage(value,proto.game.BallState.deserializeBinaryFromReader);
      msg.setBall(value);
      break;
    case 3:
      var value = new proto.game.PaddleState;
      reader.readMessage(value,proto.game.PaddleState.deserializeBinaryFromReader);
      msg.setPlayer1Paddle(value);
      break;
    case 4:
      var value = new proto.game.PaddleState;
      reader.readMessage(value,proto.game.PaddleState.deserializeBinaryFromReader);
      msg.setPlayer2Paddle(value);
      break;
    case 5:
      var value = new proto.game.ScoreState;
      reader.readMessage(value,proto.game.ScoreState.deserializeBinaryFromReader);
      msg.setScore(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer1Id(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer2Id(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.GameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.GameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.GameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBall();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.game.BallState.serializeBinaryToWriter
    );
  }
  f = message.getPlayer1Paddle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.game.PaddleState.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2Paddle();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.game.PaddleState.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.game.ScoreState.serializeBinaryToWriter
    );
  }
  f = message.getPlayer1Id();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPlayer2Id();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string match_id = 1;
 * @return {string}
 */
proto.game.GameState.prototype.getMatchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.GameState} returns this
 */
proto.game.GameState.prototype.setMatchId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BallState ball = 2;
 * @return {?proto.game.BallState}
 */
proto.game.GameState.prototype.getBall = function() {
  return /** @type{?proto.game.BallState} */ (
    jspb.Message.getWrapperField(this, proto.game.BallState, 2));
};


/**
 * @param {?proto.game.BallState|undefined} value
 * @return {!proto.game.GameState} returns this
*/
proto.game.GameState.prototype.setBall = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.GameState} returns this
 */
proto.game.GameState.prototype.clearBall = function() {
  return this.setBall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.GameState.prototype.hasBall = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PaddleState player1_paddle = 3;
 * @return {?proto.game.PaddleState}
 */
proto.game.GameState.prototype.getPlayer1Paddle = function() {
  return /** @type{?proto.game.PaddleState} */ (
    jspb.Message.getWrapperField(this, proto.game.PaddleState, 3));
};


/**
 * @param {?proto.game.PaddleState|undefined} value
 * @return {!proto.game.GameState} returns this
*/
proto.game.GameState.prototype.setPlayer1Paddle = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.GameState} returns this
 */
proto.game.GameState.prototype.clearPlayer1Paddle = function() {
  return this.setPlayer1Paddle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.GameState.prototype.hasPlayer1Paddle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PaddleState player2_paddle = 4;
 * @return {?proto.game.PaddleState}
 */
proto.game.GameState.prototype.getPlayer2Paddle = function() {
  return /** @type{?proto.game.PaddleState} */ (
    jspb.Message.getWrapperField(this, proto.game.PaddleState, 4));
};


/**
 * @param {?proto.game.PaddleState|undefined} value
 * @return {!proto.game.GameState} returns this
*/
proto.game.GameState.prototype.setPlayer2Paddle = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.GameState} returns this
 */
proto.game.GameState.prototype.clearPlayer2Paddle = function() {
  return this.setPlayer2Paddle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.GameState.prototype.hasPlayer2Paddle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ScoreState score = 5;
 * @return {?proto.game.ScoreState}
 */
proto.game.GameState.prototype.getScore = function() {
  return /** @type{?proto.game.ScoreState} */ (
    jspb.Message.getWrapperField(this, proto.game.ScoreState, 5));
};


/**
 * @param {?proto.game.ScoreState|undefined} value
 * @return {!proto.game.GameState} returns this
*/
proto.game.GameState.prototype.setScore = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.GameState} returns this
 */
proto.game.GameState.prototype.clearScore = function() {
  return this.setScore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.GameState.prototype.hasScore = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string player1_id = 6;
 * @return {string}
 */
proto.game.GameState.prototype.getPlayer1Id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.GameState} returns this
 */
proto.game.GameState.prototype.setPlayer1Id = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string player2_id = 7;
 * @return {string}
 */
proto.game.GameState.prototype.getPlayer2Id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.GameState} returns this
 */
proto.game.GameState.prototype.setPlayer2Id = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.game.GameEvent.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.game.GameEvent.EventTypeCase = {
  EVENT_TYPE_NOT_SET: 0,
  SCORE_UPDATE: 1,
  GAME_OVER: 2
};

/**
 * @return {proto.game.GameEvent.EventTypeCase}
 */
proto.game.GameEvent.prototype.getEventTypeCase = function() {
  return /** @type {proto.game.GameEvent.EventTypeCase} */(jspb.Message.computeOneofCase(this, proto.game.GameEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.GameEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.game.GameEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.GameEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
scoreUpdate: (f = msg.getScoreUpdate()) && proto.game.GameEvent.ScoreUpdate.toObject(includeInstance, f),
gameOver: (f = msg.getGameOver()) && proto.game.GameEvent.GameOver.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.GameEvent}
 */
proto.game.GameEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.GameEvent;
  return proto.game.GameEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.GameEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.GameEvent}
 */
proto.game.GameEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.game.GameEvent.ScoreUpdate;
      reader.readMessage(value,proto.game.GameEvent.ScoreUpdate.deserializeBinaryFromReader);
      msg.setScoreUpdate(value);
      break;
    case 2:
      var value = new proto.game.GameEvent.GameOver;
      reader.readMessage(value,proto.game.GameEvent.GameOver.deserializeBinaryFromReader);
      msg.setGameOver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.GameEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.GameEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.GameEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScoreUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.game.GameEvent.ScoreUpdate.serializeBinaryToWriter
    );
  }
  f = message.getGameOver();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.game.GameEvent.GameOver.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.GameEvent.ScoreUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.game.GameEvent.ScoreUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.GameEvent.ScoreUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameEvent.ScoreUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
newScore: (f = msg.getNewScore()) && proto.game.ScoreState.toObject(includeInstance, f),
scoringPlayerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.GameEvent.ScoreUpdate}
 */
proto.game.GameEvent.ScoreUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.GameEvent.ScoreUpdate;
  return proto.game.GameEvent.ScoreUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.GameEvent.ScoreUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.GameEvent.ScoreUpdate}
 */
proto.game.GameEvent.ScoreUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.game.ScoreState;
      reader.readMessage(value,proto.game.ScoreState.deserializeBinaryFromReader);
      msg.setNewScore(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScoringPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.GameEvent.ScoreUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.GameEvent.ScoreUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.GameEvent.ScoreUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameEvent.ScoreUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewScore();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.game.ScoreState.serializeBinaryToWriter
    );
  }
  f = message.getScoringPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ScoreState new_score = 1;
 * @return {?proto.game.ScoreState}
 */
proto.game.GameEvent.ScoreUpdate.prototype.getNewScore = function() {
  return /** @type{?proto.game.ScoreState} */ (
    jspb.Message.getWrapperField(this, proto.game.ScoreState, 1));
};


/**
 * @param {?proto.game.ScoreState|undefined} value
 * @return {!proto.game.GameEvent.ScoreUpdate} returns this
*/
proto.game.GameEvent.ScoreUpdate.prototype.setNewScore = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.GameEvent.ScoreUpdate} returns this
 */
proto.game.GameEvent.ScoreUpdate.prototype.clearNewScore = function() {
  return this.setNewScore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.GameEvent.ScoreUpdate.prototype.hasNewScore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string scoring_player_id = 2;
 * @return {string}
 */
proto.game.GameEvent.ScoreUpdate.prototype.getScoringPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.GameEvent.ScoreUpdate} returns this
 */
proto.game.GameEvent.ScoreUpdate.prototype.setScoringPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.GameEvent.GameOver.prototype.toObject = function(opt_includeInstance) {
  return proto.game.GameEvent.GameOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.GameEvent.GameOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameEvent.GameOver.toObject = function(includeInstance, msg) {
  var f, obj = {
winnerPlayerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
loserPlayerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
finalScore: (f = msg.getFinalScore()) && proto.game.ScoreState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.GameEvent.GameOver}
 */
proto.game.GameEvent.GameOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.GameEvent.GameOver;
  return proto.game.GameEvent.GameOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.GameEvent.GameOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.GameEvent.GameOver}
 */
proto.game.GameEvent.GameOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinnerPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoserPlayerId(value);
      break;
    case 3:
      var value = new proto.game.ScoreState;
      reader.readMessage(value,proto.game.ScoreState.deserializeBinaryFromReader);
      msg.setFinalScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.GameEvent.GameOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.GameEvent.GameOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.GameEvent.GameOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.GameEvent.GameOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinnerPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLoserPlayerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFinalScore();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.game.ScoreState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string winner_player_id = 1;
 * @return {string}
 */
proto.game.GameEvent.GameOver.prototype.getWinnerPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.GameEvent.GameOver} returns this
 */
proto.game.GameEvent.GameOver.prototype.setWinnerPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string loser_player_id = 2;
 * @return {string}
 */
proto.game.GameEvent.GameOver.prototype.getLoserPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.GameEvent.GameOver} returns this
 */
proto.game.GameEvent.GameOver.prototype.setLoserPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ScoreState final_score = 3;
 * @return {?proto.game.ScoreState}
 */
proto.game.GameEvent.GameOver.prototype.getFinalScore = function() {
  return /** @type{?proto.game.ScoreState} */ (
    jspb.Message.getWrapperField(this, proto.game.ScoreState, 3));
};


/**
 * @param {?proto.game.ScoreState|undefined} value
 * @return {!proto.game.GameEvent.GameOver} returns this
*/
proto.game.GameEvent.GameOver.prototype.setFinalScore = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.GameEvent.GameOver} returns this
 */
proto.game.GameEvent.GameOver.prototype.clearFinalScore = function() {
  return this.setFinalScore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.GameEvent.GameOver.prototype.hasFinalScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ScoreUpdate score_update = 1;
 * @return {?proto.game.GameEvent.ScoreUpdate}
 */
proto.game.GameEvent.prototype.getScoreUpdate = function() {
  return /** @type{?proto.game.GameEvent.ScoreUpdate} */ (
    jspb.Message.getWrapperField(this, proto.game.GameEvent.ScoreUpdate, 1));
};


/**
 * @param {?proto.game.GameEvent.ScoreUpdate|undefined} value
 * @return {!proto.game.GameEvent} returns this
*/
proto.game.GameEvent.prototype.setScoreUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.game.GameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.GameEvent} returns this
 */
proto.game.GameEvent.prototype.clearScoreUpdate = function() {
  return this.setScoreUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.GameEvent.prototype.hasScoreUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GameOver game_over = 2;
 * @return {?proto.game.GameEvent.GameOver}
 */
proto.game.GameEvent.prototype.getGameOver = function() {
  return /** @type{?proto.game.GameEvent.GameOver} */ (
    jspb.Message.getWrapperField(this, proto.game.GameEvent.GameOver, 2));
};


/**
 * @param {?proto.game.GameEvent.GameOver|undefined} value
 * @return {!proto.game.GameEvent} returns this
*/
proto.game.GameEvent.prototype.setGameOver = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.game.GameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.GameEvent} returns this
 */
proto.game.GameEvent.prototype.clearGameOver = function() {
  return this.setGameOver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.GameEvent.prototype.hasGameOver = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.game.ClientToServer.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.game.ClientToServer.MessageTypeCase = {
  MESSAGE_TYPE_NOT_SET: 0,
  CONNECT_REQUEST: 1,
  INPUT: 2
};

/**
 * @return {proto.game.ClientToServer.MessageTypeCase}
 */
proto.game.ClientToServer.prototype.getMessageTypeCase = function() {
  return /** @type {proto.game.ClientToServer.MessageTypeCase} */(jspb.Message.computeOneofCase(this, proto.game.ClientToServer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ClientToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ClientToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ClientToServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ClientToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
connectRequest: (f = msg.getConnectRequest()) && proto.game.ClientToServer.InitialConnect.toObject(includeInstance, f),
input: (f = msg.getInput()) && proto.game.ClientToServer.PaddleInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ClientToServer}
 */
proto.game.ClientToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ClientToServer;
  return proto.game.ClientToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ClientToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ClientToServer}
 */
proto.game.ClientToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.game.ClientToServer.InitialConnect;
      reader.readMessage(value,proto.game.ClientToServer.InitialConnect.deserializeBinaryFromReader);
      msg.setConnectRequest(value);
      break;
    case 2:
      var value = new proto.game.ClientToServer.PaddleInput;
      reader.readMessage(value,proto.game.ClientToServer.PaddleInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ClientToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.ClientToServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.ClientToServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ClientToServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.game.ClientToServer.InitialConnect.serializeBinaryToWriter
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.game.ClientToServer.PaddleInput.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ClientToServer.InitialConnect.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ClientToServer.InitialConnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ClientToServer.InitialConnect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ClientToServer.InitialConnect.toObject = function(includeInstance, msg) {
  var f, obj = {
playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
matchId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ClientToServer.InitialConnect}
 */
proto.game.ClientToServer.InitialConnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ClientToServer.InitialConnect;
  return proto.game.ClientToServer.InitialConnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ClientToServer.InitialConnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ClientToServer.InitialConnect}
 */
proto.game.ClientToServer.InitialConnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ClientToServer.InitialConnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.ClientToServer.InitialConnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.ClientToServer.InitialConnect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ClientToServer.InitialConnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMatchId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.game.ClientToServer.InitialConnect.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.ClientToServer.InitialConnect} returns this
 */
proto.game.ClientToServer.InitialConnect.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string match_id = 2;
 * @return {string}
 */
proto.game.ClientToServer.InitialConnect.prototype.getMatchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.game.ClientToServer.InitialConnect} returns this
 */
proto.game.ClientToServer.InitialConnect.prototype.setMatchId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ClientToServer.PaddleInput.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ClientToServer.PaddleInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ClientToServer.PaddleInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ClientToServer.PaddleInput.toObject = function(includeInstance, msg) {
  var f, obj = {
direction: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ClientToServer.PaddleInput}
 */
proto.game.ClientToServer.PaddleInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ClientToServer.PaddleInput;
  return proto.game.ClientToServer.PaddleInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ClientToServer.PaddleInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ClientToServer.PaddleInput}
 */
proto.game.ClientToServer.PaddleInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.game.ClientToServer.PaddleInput.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ClientToServer.PaddleInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.ClientToServer.PaddleInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.ClientToServer.PaddleInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ClientToServer.PaddleInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.game.ClientToServer.PaddleInput.Direction = {
  DIRECTION_UNSPECIFIED: 0,
  STOP: 1,
  UP: 2,
  DOWN: 3
};

/**
 * optional Direction direction = 1;
 * @return {!proto.game.ClientToServer.PaddleInput.Direction}
 */
proto.game.ClientToServer.PaddleInput.prototype.getDirection = function() {
  return /** @type {!proto.game.ClientToServer.PaddleInput.Direction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.game.ClientToServer.PaddleInput.Direction} value
 * @return {!proto.game.ClientToServer.PaddleInput} returns this
 */
proto.game.ClientToServer.PaddleInput.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional InitialConnect connect_request = 1;
 * @return {?proto.game.ClientToServer.InitialConnect}
 */
proto.game.ClientToServer.prototype.getConnectRequest = function() {
  return /** @type{?proto.game.ClientToServer.InitialConnect} */ (
    jspb.Message.getWrapperField(this, proto.game.ClientToServer.InitialConnect, 1));
};


/**
 * @param {?proto.game.ClientToServer.InitialConnect|undefined} value
 * @return {!proto.game.ClientToServer} returns this
*/
proto.game.ClientToServer.prototype.setConnectRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.game.ClientToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.ClientToServer} returns this
 */
proto.game.ClientToServer.prototype.clearConnectRequest = function() {
  return this.setConnectRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.ClientToServer.prototype.hasConnectRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PaddleInput input = 2;
 * @return {?proto.game.ClientToServer.PaddleInput}
 */
proto.game.ClientToServer.prototype.getInput = function() {
  return /** @type{?proto.game.ClientToServer.PaddleInput} */ (
    jspb.Message.getWrapperField(this, proto.game.ClientToServer.PaddleInput, 2));
};


/**
 * @param {?proto.game.ClientToServer.PaddleInput|undefined} value
 * @return {!proto.game.ClientToServer} returns this
*/
proto.game.ClientToServer.prototype.setInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.game.ClientToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.ClientToServer} returns this
 */
proto.game.ClientToServer.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.ClientToServer.prototype.hasInput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.game.ServerToClient.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.game.ServerToClient.MessageTypeCase = {
  MESSAGE_TYPE_NOT_SET: 0,
  STATE_UPDATE: 1,
  EVENT: 2
};

/**
 * @return {proto.game.ServerToClient.MessageTypeCase}
 */
proto.game.ServerToClient.prototype.getMessageTypeCase = function() {
  return /** @type {proto.game.ServerToClient.MessageTypeCase} */(jspb.Message.computeOneofCase(this, proto.game.ServerToClient.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.ServerToClient.prototype.toObject = function(opt_includeInstance) {
  return proto.game.ServerToClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.ServerToClient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ServerToClient.toObject = function(includeInstance, msg) {
  var f, obj = {
stateUpdate: (f = msg.getStateUpdate()) && proto.game.GameState.toObject(includeInstance, f),
event: (f = msg.getEvent()) && proto.game.GameEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.game.ServerToClient}
 */
proto.game.ServerToClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.game.ServerToClient;
  return proto.game.ServerToClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.game.ServerToClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.game.ServerToClient}
 */
proto.game.ServerToClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.game.GameState;
      reader.readMessage(value,proto.game.GameState.deserializeBinaryFromReader);
      msg.setStateUpdate(value);
      break;
    case 2:
      var value = new proto.game.GameEvent;
      reader.readMessage(value,proto.game.GameEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.game.ServerToClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.game.ServerToClient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.game.ServerToClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.game.ServerToClient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.game.GameState.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.game.GameEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameState state_update = 1;
 * @return {?proto.game.GameState}
 */
proto.game.ServerToClient.prototype.getStateUpdate = function() {
  return /** @type{?proto.game.GameState} */ (
    jspb.Message.getWrapperField(this, proto.game.GameState, 1));
};


/**
 * @param {?proto.game.GameState|undefined} value
 * @return {!proto.game.ServerToClient} returns this
*/
proto.game.ServerToClient.prototype.setStateUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.game.ServerToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.ServerToClient} returns this
 */
proto.game.ServerToClient.prototype.clearStateUpdate = function() {
  return this.setStateUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.ServerToClient.prototype.hasStateUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GameEvent event = 2;
 * @return {?proto.game.GameEvent}
 */
proto.game.ServerToClient.prototype.getEvent = function() {
  return /** @type{?proto.game.GameEvent} */ (
    jspb.Message.getWrapperField(this, proto.game.GameEvent, 2));
};


/**
 * @param {?proto.game.GameEvent|undefined} value
 * @return {!proto.game.ServerToClient} returns this
*/
proto.game.ServerToClient.prototype.setEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.game.ServerToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.game.ServerToClient} returns this
 */
proto.game.ServerToClient.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.game.ServerToClient.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.game);
