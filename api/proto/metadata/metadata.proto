syntax = "proto3";

package metadata;

import "google/protobuf/timestamp.proto";

// Go package option specifies the output directory relative to the go.mod file
// and the Go package name. Format: <output_path>;<package_name>
option go_package = "github.com/Irishsmurf/pongolang/api/gen/go/metadata;metadata_pb";

// Represents a registered player
message Player {
  string player_id = 1; // Unique identifier (e.g., UUID generated by server)
  string display_name = 2; // Name chosen by the player
  google.protobuf.Timestamp created_at = 3; // When the player was registered
}

// Represents a score achieved by a player
message Score {
  string score_id = 1; // Unique identifier for the score record
  string player_id = 2; // ID of the player who achieved the score
  string player_display_name = 3; // Denormalized for easier display on high score lists
  int32 points = 4; // The score value (e.g., number of wins, points in a match)
  google.protobuf.Timestamp achieved_at = 5; // When the score was recorded
}

// Service definition for managing metadata
service MetadataService {
  // Registers a new player
  rpc RegisterPlayer(RegisterPlayerRequest) returns (RegisterPlayerResponse);

  // Retrieves player details
  rpc GetPlayer(GetPlayerRequest) returns (GetPlayerResponse);

  // Submits a new score for a player (e.g., after a game)
  rpc SubmitScore(SubmitScoreRequest) returns (SubmitScoreResponse);

  // Retrieves the list of high scores
  rpc GetHighScores(GetHighScoresRequest) returns (GetHighScoresResponse);
}

// Request message for RegisterPlayer RPC
message RegisterPlayerRequest {
  string desired_display_name = 1; // Player's preferred name
}

// Response message for RegisterPlayer RPC
message RegisterPlayerResponse {
  Player player = 1; // The newly created player details
}

// Request message for GetPlayer RPC
message GetPlayerRequest {
  string player_id = 1; // ID of the player to retrieve
}

// Response message for GetPlayer RPC
// Returns an empty Player message if not found (check player_id)
message GetPlayerResponse {
  Player player = 1;
}

// Request message for SubmitScore RPC
message SubmitScoreRequest {
  string player_id = 1; // ID of the player submitting the score
  int32 points = 2; // Score value
}

// Response message for SubmitScore RPC
message SubmitScoreResponse {
  Score score = 1; // The recorded score details
}

// Request message for GetHighScores RPC
message GetHighScoresRequest {
  int32 limit = 1; // Maximum number of high scores to return (e.g., 10)
}

// Response message for GetHighScores RPC
message GetHighScoresResponse {
  repeated Score scores = 1; // List of high scores, typically ordered descending by points
}