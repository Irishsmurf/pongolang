// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: game/game.proto

package game_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientToServer_PaddleInput_Direction int32

const (
	ClientToServer_PaddleInput_DIRECTION_UNSPECIFIED ClientToServer_PaddleInput_Direction = 0
	ClientToServer_PaddleInput_STOP                  ClientToServer_PaddleInput_Direction = 1
	ClientToServer_PaddleInput_UP                    ClientToServer_PaddleInput_Direction = 2
	ClientToServer_PaddleInput_DOWN                  ClientToServer_PaddleInput_Direction = 3
)

// Enum value maps for ClientToServer_PaddleInput_Direction.
var (
	ClientToServer_PaddleInput_Direction_name = map[int32]string{
		0: "DIRECTION_UNSPECIFIED",
		1: "STOP",
		2: "UP",
		3: "DOWN",
	}
	ClientToServer_PaddleInput_Direction_value = map[string]int32{
		"DIRECTION_UNSPECIFIED": 0,
		"STOP":                  1,
		"UP":                    2,
		"DOWN":                  3,
	}
)

func (x ClientToServer_PaddleInput_Direction) Enum() *ClientToServer_PaddleInput_Direction {
	p := new(ClientToServer_PaddleInput_Direction)
	*p = x
	return p
}

func (x ClientToServer_PaddleInput_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientToServer_PaddleInput_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_game_game_proto_enumTypes[0].Descriptor()
}

func (ClientToServer_PaddleInput_Direction) Type() protoreflect.EnumType {
	return &file_game_game_proto_enumTypes[0]
}

func (x ClientToServer_PaddleInput_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientToServer_PaddleInput_Direction.Descriptor instead.
func (ClientToServer_PaddleInput_Direction) EnumDescriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{6, 1, 0}
}

// Basic 2D vector
type Vector2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector2) Reset() {
	*x = Vector2{}
	mi := &file_game_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector2) ProtoMessage() {}

func (x *Vector2) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector2.ProtoReflect.Descriptor instead.
func (*Vector2) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{0}
}

func (x *Vector2) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector2) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// Represents the state of a paddle
type PaddleState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Position      *Vector2               `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"` // Center or top position of the paddle
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaddleState) Reset() {
	*x = PaddleState{}
	mi := &file_game_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaddleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddleState) ProtoMessage() {}

func (x *PaddleState) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddleState.ProtoReflect.Descriptor instead.
func (*PaddleState) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{1}
}

func (x *PaddleState) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PaddleState) GetPosition() *Vector2 {
	if x != nil {
		return x.Position
	}
	return nil
}

// Represents the state of the ball
type BallState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      *Vector2               `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Velocity      *Vector2               `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BallState) Reset() {
	*x = BallState{}
	mi := &file_game_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BallState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallState) ProtoMessage() {}

func (x *BallState) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallState.ProtoReflect.Descriptor instead.
func (*BallState) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{2}
}

func (x *BallState) GetPosition() *Vector2 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *BallState) GetVelocity() *Vector2 {
	if x != nil {
		return x.Velocity
	}
	return nil
}

// Represents the current scores
type ScoreState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Player1Score  int32                  `protobuf:"varint,1,opt,name=player1_score,json=player1Score,proto3" json:"player1_score,omitempty"` // Score associated with player1_id in GameState
	Player2Score  int32                  `protobuf:"varint,2,opt,name=player2_score,json=player2Score,proto3" json:"player2_score,omitempty"` // Score associated with player2_id in GameState
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScoreState) Reset() {
	*x = ScoreState{}
	mi := &file_game_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreState) ProtoMessage() {}

func (x *ScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreState.ProtoReflect.Descriptor instead.
func (*ScoreState) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{3}
}

func (x *ScoreState) GetPlayer1Score() int32 {
	if x != nil {
		return x.Player1Score
	}
	return 0
}

func (x *ScoreState) GetPlayer2Score() int32 {
	if x != nil {
		return x.Player2Score
	}
	return 0
}

// Snapshot of the entire game state at a point in time
type GameState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Ball          *BallState             `protobuf:"bytes,2,opt,name=ball,proto3" json:"ball,omitempty"`
	Player1Paddle *PaddleState           `protobuf:"bytes,3,opt,name=player1_paddle,json=player1Paddle,proto3" json:"player1_paddle,omitempty"` // State for player 1
	Player2Paddle *PaddleState           `protobuf:"bytes,4,opt,name=player2_paddle,json=player2Paddle,proto3" json:"player2_paddle,omitempty"` // State for player 2
	Score         *ScoreState            `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	Player1Id     string                 `protobuf:"bytes,6,opt,name=player1_id,json=player1Id,proto3" json:"player1_id,omitempty"` // ID for player 1 (useful for client to know which paddle is theirs)
	Player2Id     string                 `protobuf:"bytes,7,opt,name=player2_id,json=player2Id,proto3" json:"player2_id,omitempty"` // ID for player 2
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameState) Reset() {
	*x = GameState{}
	mi := &file_game_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{4}
}

func (x *GameState) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GameState) GetBall() *BallState {
	if x != nil {
		return x.Ball
	}
	return nil
}

func (x *GameState) GetPlayer1Paddle() *PaddleState {
	if x != nil {
		return x.Player1Paddle
	}
	return nil
}

func (x *GameState) GetPlayer2Paddle() *PaddleState {
	if x != nil {
		return x.Player2Paddle
	}
	return nil
}

func (x *GameState) GetScore() *ScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *GameState) GetPlayer1Id() string {
	if x != nil {
		return x.Player1Id
	}
	return ""
}

func (x *GameState) GetPlayer2Id() string {
	if x != nil {
		return x.Player2Id
	}
	return ""
}

// Specific events that occur during the game
type GameEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to EventType:
	//
	//	*GameEvent_ScoreUpdate_
	//	*GameEvent_GameOver_
	EventType     isGameEvent_EventType `protobuf_oneof:"event_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameEvent) Reset() {
	*x = GameEvent{}
	mi := &file_game_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent) ProtoMessage() {}

func (x *GameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent.ProtoReflect.Descriptor instead.
func (*GameEvent) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{5}
}

func (x *GameEvent) GetEventType() isGameEvent_EventType {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *GameEvent) GetScoreUpdate() *GameEvent_ScoreUpdate {
	if x != nil {
		if x, ok := x.EventType.(*GameEvent_ScoreUpdate_); ok {
			return x.ScoreUpdate
		}
	}
	return nil
}

func (x *GameEvent) GetGameOver() *GameEvent_GameOver {
	if x != nil {
		if x, ok := x.EventType.(*GameEvent_GameOver_); ok {
			return x.GameOver
		}
	}
	return nil
}

type isGameEvent_EventType interface {
	isGameEvent_EventType()
}

type GameEvent_ScoreUpdate_ struct {
	ScoreUpdate *GameEvent_ScoreUpdate `protobuf:"bytes,1,opt,name=score_update,json=scoreUpdate,proto3,oneof"` // Sent when a point is scored
}

type GameEvent_GameOver_ struct {
	GameOver *GameEvent_GameOver `protobuf:"bytes,2,opt,name=game_over,json=gameOver,proto3,oneof"` // Sent when the game ends
}

func (*GameEvent_ScoreUpdate_) isGameEvent_EventType() {}

func (*GameEvent_GameOver_) isGameEvent_EventType() {}

// Messages sent from the client to the game server
type ClientToServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*ClientToServer_ConnectRequest
	//	*ClientToServer_Input
	MessageType   isClientToServer_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientToServer) Reset() {
	*x = ClientToServer{}
	mi := &file_game_game_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServer) ProtoMessage() {}

func (x *ClientToServer) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServer.ProtoReflect.Descriptor instead.
func (*ClientToServer) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{6}
}

func (x *ClientToServer) GetMessageType() isClientToServer_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *ClientToServer) GetConnectRequest() *ClientToServer_InitialConnect {
	if x != nil {
		if x, ok := x.MessageType.(*ClientToServer_ConnectRequest); ok {
			return x.ConnectRequest
		}
	}
	return nil
}

func (x *ClientToServer) GetInput() *ClientToServer_PaddleInput {
	if x != nil {
		if x, ok := x.MessageType.(*ClientToServer_Input); ok {
			return x.Input
		}
	}
	return nil
}

type isClientToServer_MessageType interface {
	isClientToServer_MessageType()
}

type ClientToServer_ConnectRequest struct {
	ConnectRequest *ClientToServer_InitialConnect `protobuf:"bytes,1,opt,name=connect_request,json=connectRequest,proto3,oneof"` // First message sent by client on connection
}

type ClientToServer_Input struct {
	Input *ClientToServer_PaddleInput `protobuf:"bytes,2,opt,name=input,proto3,oneof"` // Subsequent messages for paddle movement
}

func (*ClientToServer_ConnectRequest) isClientToServer_MessageType() {}

func (*ClientToServer_Input) isClientToServer_MessageType() {}

// Messages sent from the game server to the client
type ServerToClient struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*ServerToClient_StateUpdate
	//	*ServerToClient_Event
	MessageType   isServerToClient_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerToClient) Reset() {
	*x = ServerToClient{}
	mi := &file_game_game_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToClient) ProtoMessage() {}

func (x *ServerToClient) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToClient.ProtoReflect.Descriptor instead.
func (*ServerToClient) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{7}
}

func (x *ServerToClient) GetMessageType() isServerToClient_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *ServerToClient) GetStateUpdate() *GameState {
	if x != nil {
		if x, ok := x.MessageType.(*ServerToClient_StateUpdate); ok {
			return x.StateUpdate
		}
	}
	return nil
}

func (x *ServerToClient) GetEvent() *GameEvent {
	if x != nil {
		if x, ok := x.MessageType.(*ServerToClient_Event); ok {
			return x.Event
		}
	}
	return nil
}

type isServerToClient_MessageType interface {
	isServerToClient_MessageType()
}

type ServerToClient_StateUpdate struct {
	StateUpdate *GameState `protobuf:"bytes,1,opt,name=state_update,json=stateUpdate,proto3,oneof"` // Periodic full state update
}

type ServerToClient_Event struct {
	Event *GameEvent `protobuf:"bytes,2,opt,name=event,proto3,oneof"` // Significant game events
}

func (*ServerToClient_StateUpdate) isServerToClient_MessageType() {}

func (*ServerToClient_Event) isServerToClient_MessageType() {}

type GameEvent_ScoreUpdate struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NewScore        *ScoreState            `protobuf:"bytes,1,opt,name=new_score,json=newScore,proto3" json:"new_score,omitempty"`
	ScoringPlayerId string                 `protobuf:"bytes,2,opt,name=scoring_player_id,json=scoringPlayerId,proto3" json:"scoring_player_id,omitempty"` // ID of the player who just scored
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GameEvent_ScoreUpdate) Reset() {
	*x = GameEvent_ScoreUpdate{}
	mi := &file_game_game_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameEvent_ScoreUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_ScoreUpdate) ProtoMessage() {}

func (x *GameEvent_ScoreUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_ScoreUpdate.ProtoReflect.Descriptor instead.
func (*GameEvent_ScoreUpdate) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GameEvent_ScoreUpdate) GetNewScore() *ScoreState {
	if x != nil {
		return x.NewScore
	}
	return nil
}

func (x *GameEvent_ScoreUpdate) GetScoringPlayerId() string {
	if x != nil {
		return x.ScoringPlayerId
	}
	return ""
}

type GameEvent_GameOver struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WinnerPlayerId string                 `protobuf:"bytes,1,opt,name=winner_player_id,json=winnerPlayerId,proto3" json:"winner_player_id,omitempty"`
	LoserPlayerId  string                 `protobuf:"bytes,2,opt,name=loser_player_id,json=loserPlayerId,proto3" json:"loser_player_id,omitempty"`
	FinalScore     *ScoreState            `protobuf:"bytes,3,opt,name=final_score,json=finalScore,proto3" json:"final_score,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GameEvent_GameOver) Reset() {
	*x = GameEvent_GameOver{}
	mi := &file_game_game_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameEvent_GameOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_GameOver) ProtoMessage() {}

func (x *GameEvent_GameOver) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_GameOver.ProtoReflect.Descriptor instead.
func (*GameEvent_GameOver) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GameEvent_GameOver) GetWinnerPlayerId() string {
	if x != nil {
		return x.WinnerPlayerId
	}
	return ""
}

func (x *GameEvent_GameOver) GetLoserPlayerId() string {
	if x != nil {
		return x.LoserPlayerId
	}
	return ""
}

func (x *GameEvent_GameOver) GetFinalScore() *ScoreState {
	if x != nil {
		return x.FinalScore
	}
	return nil
}

type ClientToServer_InitialConnect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	MatchId       string                 `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` // To ensure connecting to the correct game instance
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientToServer_InitialConnect) Reset() {
	*x = ClientToServer_InitialConnect{}
	mi := &file_game_game_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientToServer_InitialConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServer_InitialConnect) ProtoMessage() {}

func (x *ClientToServer_InitialConnect) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServer_InitialConnect.ProtoReflect.Descriptor instead.
func (*ClientToServer_InitialConnect) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ClientToServer_InitialConnect) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *ClientToServer_InitialConnect) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type ClientToServer_PaddleInput struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Direction     ClientToServer_PaddleInput_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=game.ClientToServer_PaddleInput_Direction" json:"direction,omitempty"` // No need for player_id here if using InitialConnect to identify stream
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientToServer_PaddleInput) Reset() {
	*x = ClientToServer_PaddleInput{}
	mi := &file_game_game_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientToServer_PaddleInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServer_PaddleInput) ProtoMessage() {}

func (x *ClientToServer_PaddleInput) ProtoReflect() protoreflect.Message {
	mi := &file_game_game_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServer_PaddleInput.ProtoReflect.Descriptor instead.
func (*ClientToServer_PaddleInput) Descriptor() ([]byte, []int) {
	return file_game_game_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ClientToServer_PaddleInput) GetDirection() ClientToServer_PaddleInput_Direction {
	if x != nil {
		return x.Direction
	}
	return ClientToServer_PaddleInput_DIRECTION_UNSPECIFIED
}

var File_game_game_proto protoreflect.FileDescriptor

const file_game_game_proto_rawDesc = "" +
	"\n" +
	"\x0fgame/game.proto\x12\x04game\"%\n" +
	"\aVector2\x12\f\n" +
	"\x01x\x18\x01 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x02R\x01y\"U\n" +
	"\vPaddleState\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12)\n" +
	"\bposition\x18\x02 \x01(\v2\r.game.Vector2R\bposition\"a\n" +
	"\tBallState\x12)\n" +
	"\bposition\x18\x01 \x01(\v2\r.game.Vector2R\bposition\x12)\n" +
	"\bvelocity\x18\x02 \x01(\v2\r.game.Vector2R\bvelocity\"V\n" +
	"\n" +
	"ScoreState\x12#\n" +
	"\rplayer1_score\x18\x01 \x01(\x05R\fplayer1Score\x12#\n" +
	"\rplayer2_score\x18\x02 \x01(\x05R\fplayer2Score\"\xa5\x02\n" +
	"\tGameState\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12#\n" +
	"\x04ball\x18\x02 \x01(\v2\x0f.game.BallStateR\x04ball\x128\n" +
	"\x0eplayer1_paddle\x18\x03 \x01(\v2\x11.game.PaddleStateR\rplayer1Paddle\x128\n" +
	"\x0eplayer2_paddle\x18\x04 \x01(\v2\x11.game.PaddleStateR\rplayer2Paddle\x12&\n" +
	"\x05score\x18\x05 \x01(\v2\x10.game.ScoreStateR\x05score\x12\x1d\n" +
	"\n" +
	"player1_id\x18\x06 \x01(\tR\tplayer1Id\x12\x1d\n" +
	"\n" +
	"player2_id\x18\a \x01(\tR\tplayer2Id\"\x90\x03\n" +
	"\tGameEvent\x12@\n" +
	"\fscore_update\x18\x01 \x01(\v2\x1b.game.GameEvent.ScoreUpdateH\x00R\vscoreUpdate\x127\n" +
	"\tgame_over\x18\x02 \x01(\v2\x18.game.GameEvent.GameOverH\x00R\bgameOver\x1ah\n" +
	"\vScoreUpdate\x12-\n" +
	"\tnew_score\x18\x01 \x01(\v2\x10.game.ScoreStateR\bnewScore\x12*\n" +
	"\x11scoring_player_id\x18\x02 \x01(\tR\x0fscoringPlayerId\x1a\x8f\x01\n" +
	"\bGameOver\x12(\n" +
	"\x10winner_player_id\x18\x01 \x01(\tR\x0ewinnerPlayerId\x12&\n" +
	"\x0floser_player_id\x18\x02 \x01(\tR\rloserPlayerId\x121\n" +
	"\vfinal_score\x18\x03 \x01(\v2\x10.game.ScoreStateR\n" +
	"finalScoreB\f\n" +
	"\n" +
	"event_type\"\x92\x03\n" +
	"\x0eClientToServer\x12N\n" +
	"\x0fconnect_request\x18\x01 \x01(\v2#.game.ClientToServer.InitialConnectH\x00R\x0econnectRequest\x128\n" +
	"\x05input\x18\x02 \x01(\v2 .game.ClientToServer.PaddleInputH\x00R\x05input\x1aH\n" +
	"\x0eInitialConnect\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x19\n" +
	"\bmatch_id\x18\x02 \x01(\tR\amatchId\x1a\x9b\x01\n" +
	"\vPaddleInput\x12H\n" +
	"\tdirection\x18\x01 \x01(\x0e2*.game.ClientToServer.PaddleInput.DirectionR\tdirection\"B\n" +
	"\tDirection\x12\x19\n" +
	"\x15DIRECTION_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04STOP\x10\x01\x12\x06\n" +
	"\x02UP\x10\x02\x12\b\n" +
	"\x04DOWN\x10\x03B\x0e\n" +
	"\fmessage_type\"\x7f\n" +
	"\x0eServerToClient\x124\n" +
	"\fstate_update\x18\x01 \x01(\v2\x0f.game.GameStateH\x00R\vstateUpdate\x12'\n" +
	"\x05event\x18\x02 \x01(\v2\x0f.game.GameEventH\x00R\x05eventB\x0e\n" +
	"\fmessage_type2K\n" +
	"\vGameService\x12<\n" +
	"\n" +
	"StreamGame\x12\x14.game.ClientToServer\x1a\x14.game.ServerToClient(\x010\x01B9Z7github.com/Irishsmurf/pongolang/api/gen/go/game;game_pbb\x06proto3"

var (
	file_game_game_proto_rawDescOnce sync.Once
	file_game_game_proto_rawDescData []byte
)

func file_game_game_proto_rawDescGZIP() []byte {
	file_game_game_proto_rawDescOnce.Do(func() {
		file_game_game_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_game_game_proto_rawDesc), len(file_game_game_proto_rawDesc)))
	})
	return file_game_game_proto_rawDescData
}

var file_game_game_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_game_game_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_game_game_proto_goTypes = []any{
	(ClientToServer_PaddleInput_Direction)(0), // 0: game.ClientToServer.PaddleInput.Direction
	(*Vector2)(nil),                       // 1: game.Vector2
	(*PaddleState)(nil),                   // 2: game.PaddleState
	(*BallState)(nil),                     // 3: game.BallState
	(*ScoreState)(nil),                    // 4: game.ScoreState
	(*GameState)(nil),                     // 5: game.GameState
	(*GameEvent)(nil),                     // 6: game.GameEvent
	(*ClientToServer)(nil),                // 7: game.ClientToServer
	(*ServerToClient)(nil),                // 8: game.ServerToClient
	(*GameEvent_ScoreUpdate)(nil),         // 9: game.GameEvent.ScoreUpdate
	(*GameEvent_GameOver)(nil),            // 10: game.GameEvent.GameOver
	(*ClientToServer_InitialConnect)(nil), // 11: game.ClientToServer.InitialConnect
	(*ClientToServer_PaddleInput)(nil),    // 12: game.ClientToServer.PaddleInput
}
var file_game_game_proto_depIdxs = []int32{
	1,  // 0: game.PaddleState.position:type_name -> game.Vector2
	1,  // 1: game.BallState.position:type_name -> game.Vector2
	1,  // 2: game.BallState.velocity:type_name -> game.Vector2
	3,  // 3: game.GameState.ball:type_name -> game.BallState
	2,  // 4: game.GameState.player1_paddle:type_name -> game.PaddleState
	2,  // 5: game.GameState.player2_paddle:type_name -> game.PaddleState
	4,  // 6: game.GameState.score:type_name -> game.ScoreState
	9,  // 7: game.GameEvent.score_update:type_name -> game.GameEvent.ScoreUpdate
	10, // 8: game.GameEvent.game_over:type_name -> game.GameEvent.GameOver
	11, // 9: game.ClientToServer.connect_request:type_name -> game.ClientToServer.InitialConnect
	12, // 10: game.ClientToServer.input:type_name -> game.ClientToServer.PaddleInput
	5,  // 11: game.ServerToClient.state_update:type_name -> game.GameState
	6,  // 12: game.ServerToClient.event:type_name -> game.GameEvent
	4,  // 13: game.GameEvent.ScoreUpdate.new_score:type_name -> game.ScoreState
	4,  // 14: game.GameEvent.GameOver.final_score:type_name -> game.ScoreState
	0,  // 15: game.ClientToServer.PaddleInput.direction:type_name -> game.ClientToServer.PaddleInput.Direction
	7,  // 16: game.GameService.StreamGame:input_type -> game.ClientToServer
	8,  // 17: game.GameService.StreamGame:output_type -> game.ServerToClient
	17, // [17:18] is the sub-list for method output_type
	16, // [16:17] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_game_game_proto_init() }
func file_game_game_proto_init() {
	if File_game_game_proto != nil {
		return
	}
	file_game_game_proto_msgTypes[5].OneofWrappers = []any{
		(*GameEvent_ScoreUpdate_)(nil),
		(*GameEvent_GameOver_)(nil),
	}
	file_game_game_proto_msgTypes[6].OneofWrappers = []any{
		(*ClientToServer_ConnectRequest)(nil),
		(*ClientToServer_Input)(nil),
	}
	file_game_game_proto_msgTypes[7].OneofWrappers = []any{
		(*ServerToClient_StateUpdate)(nil),
		(*ServerToClient_Event)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_game_game_proto_rawDesc), len(file_game_game_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_game_game_proto_goTypes,
		DependencyIndexes: file_game_game_proto_depIdxs,
		EnumInfos:         file_game_game_proto_enumTypes,
		MessageInfos:      file_game_game_proto_msgTypes,
	}.Build()
	File_game_game_proto = out.File
	file_game_game_proto_goTypes = nil
	file_game_game_proto_depIdxs = nil
}
